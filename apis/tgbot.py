from pydoc import replace

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, CallbackContext
import asyncio
import marzban_all_acyncio
import sqldatabase


# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
async def hello(update: Update, context):
    await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.')
    await start(update, context)


async def start(update: Update, context):
    keyboard = [
        ['üè¨–ú–∞–≥–∞–∑–∏–Ω'],
        ['üîë–ö–ª—é—á–∏'],
        ['ü™ô–ö–æ—à–µ–ª–µ–∫']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω"
async def shop(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üá´üá∑", callback_data='fr')],
        [InlineKeyboardButton("üá©üá™", callback_data='de')],
        [InlineKeyboardButton("üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]

    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:', reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞
async def button(update: Update, context):
    query = update.callback_query
    await query.answer()

    # –§—Ä–∞–Ω—Ü–∏—è
    if query.data == 'fr':
        key_keyboard = [
            [InlineKeyboardButton("üîß–ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á", callback_data='testfr')],
            [InlineKeyboardButton("üí∞–ö—É–ø–∏—Ç—å –∫–ª—é—á", callback_data='buyfr')],
            [InlineKeyboardButton("üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]

        ]
        reply_markup = InlineKeyboardMarkup(key_keyboard)
        await query.edit_message_text(
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ ‚≠êÔ∏è üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è, unlim, 300 —Ä—É–±/–º–µ—Å:\n–¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞: ‚ôø MARZBAN VPN\n–†–µ–π—Ç–∏–Ω–≥: NA\nPing: 40 ms\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 300 —Ä—É–±/–º–µ—Å.\n–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: 30 –º–∏–Ω.\n–ü–æ–ª—É—á–∞—è –∫–ª—é—á –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ ',
            reply_markup=reply_markup)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞

    # –ì–µ—Ä–º–∞–Ω–∏—è
    elif query.data == 'de':
        key_keyboard = [
            [InlineKeyboardButton("üîß–ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á", callback_data='testde')],
            [InlineKeyboardButton("üí∞–ö—É–ø–∏—Ç—å –∫–ª—é—á", callback_data='buyde')],
            [InlineKeyboardButton("üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]

        ]
        reply_markup = InlineKeyboardMarkup(key_keyboard)
        await query.edit_message_text(
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ ‚≠êÔ∏è üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è, unlim, 300 —Ä—É–±/–º–µ—Å:\n–¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞: ‚ôø MARZBAN VPN\n–†–µ–π—Ç–∏–Ω–≥: NA\nPing: 40 ms\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 300 —Ä—É–±/–º–µ—Å.\n–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: 30 –º–∏–Ω.\n–ü–æ–ª—É—á–∞—è –∫–ª—é—á –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ ',
            reply_markup=reply_markup)

    # –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á –§—Ä–∞–Ω—Ü–∏—è
    elif query.data == 'testfr':

        await marzban_all_acyncio.France.async_init()
        await marzban_all_acyncio.France.delete_exp()
        user_id = update.effective_user.id

        key = await marzban_all_acyncio.France.get_trial_subscription(telegram_id=str(user_id), param='france')
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á, –µ–≥–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 30 –º–∏–Ω—É—Ç:\n\n"
            f"`{key}` \n\n"
            f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã:\n"
            f"[–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é](https://telegra.ph/Instrukciya-po-ispolzovaniyu-klyuchej-01-31)",
            parse_mode="MarkdownV2",
            reply_markup=reply_markup)


    # –û–±—ã—á–Ω—ã–π –∫–ª—é—á –§—Ä–∞–Ω—Ü–∏—è
    elif query.data == 'buyfr':

        await marzban_all_acyncio.France.async_init()
        await marzban_all_acyncio.France.delete_exp()
        user_id = update.effective_user.id

        key = await marzban_all_acyncio.France.get_subscription(telegram_id=str(user_id), param='france')

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –≤–∞—à –∫–ª—é—á:\n\n"
                                           f"`{key}` \n\n"
                                           f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã:\n"
                                           f"[–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é](https://telegra.ph/Instrukciya-po-ispolzovaniyu-klyuchej-01-31)",
                                      parse_mode="MarkdownV2",
                                      reply_markup=reply_markup)

    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –ì–µ—Ä–º–∞–Ω–∏—è
    elif query.data == 'testde':

        await marzban_all_acyncio.Germany.async_init()
        await marzban_all_acyncio.Germany.delete_exp()
        user_id = update.effective_user.id

        key = await marzban_all_acyncio.Germany.get_trial_subscription(telegram_id=str(user_id), param='germany')

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á, –µ–≥–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 30 –º–∏–Ω—É—Ç:\n\n"
                                           f"`{key}` \n\n"
                                           f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã:\n"
                                           f"[–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é](https://telegra.ph/Instrukciya-po-ispolzovaniyu-klyuchej-01-31)",
                                      parse_mode="MarkdownV2",
                                      reply_markup=reply_markup)

    # –û–±—ã—á–Ω—ã–π –∫–ª—é—á –ì–µ—Ä–º–∞–Ω–∏—è
    elif query.data == 'buyde':

        await marzban_all_acyncio.Germany.async_init()
        await marzban_all_acyncio.Germany.delete_exp()
        user_id = update.effective_user.id

        key = await marzban_all_acyncio.Germany.get_subscription(telegram_id=str(user_id), param='germany')

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –≤–∞—à –∫–ª—é—á:\n\n"
                                           f"`{key}` \n\n"
                                           f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã:\n"
                                           f"[–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é](https://telegra.ph/Instrukciya-po-ispolzovaniyu-klyuchej-01-31)",
                                      parse_mode="MarkdownV2",
                                      reply_markup=reply_markup)



    elif query.data == 'back':
        await back(update, context)

    elif query.data == 'key3':
        user_id = update.effective_user.id
        keyinfo = await marzban_all_acyncio.get_link(telegram_id=str(user_id))
        keyboard = [
            [InlineKeyboardButton("üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text=f"–í–∞—à –∫–ª—é—á:\n\n"
                                           f"`{keyinfo[2]}` \n\n"
                                           f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã:\n",
                                      parse_mode="MarkdownV2",
                                      reply_markup=reply_markup)

    elif query.data == 'key4':

        user_id = update.effective_user.id

        keyinfo = await marzban_all_acyncio.get_link(telegram_id=str(user_id))

        keyboard = [
            [InlineKeyboardButton("üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text=f"–í–∞—à –∫–ª—é—á:\n\n"
                                           f"`{keyinfo[3]}` \n\n"
                                           f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã:\n",
                                      parse_mode="MarkdownV2",
                                      reply_markup=reply_markup)

    elif query.data == 'key5':

        user_id = update.effective_user.id

        keyinfo = await marzban_all_acyncio.get_link(telegram_id=str(user_id))

        keyboard = [
            [InlineKeyboardButton("üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text=f"–í–∞—à –∫–ª—é—á:\n\n"
                                           f"`{keyinfo[4]}` \n\n"
                                           f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã:\n",
                                      parse_mode="MarkdownV2",
                                      reply_markup=reply_markup)

    elif query.data == 'key6':

        user_id = update.effective_user.id

        keyinfo = await marzban_all_acyncio.get_link(telegram_id=str(user_id))

        keyboard = [
            [InlineKeyboardButton("üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text=f"–í–∞—à –∫–ª—é—á:\n\n"
                                           f"`{keyinfo[5]}` \n\n"
                                           f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã:\n",
                                      parse_mode="MarkdownV2",
                                      reply_markup=reply_markup)


# –ö–Ω–æ–ø–∫–∞ –ö–æ—à–µ–ª–µ–∫
async def wallet(update: Update, context):
    keyboard = [
        ['üíµ–ë–∞–ª–∞–Ω—Å'],
        ['‚ûï–ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
        ['üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text('–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=reply_markup)


# –ö–Ω–æ–ø–∫–∞ –ë–∞–ª–∞–Ω—Å
async def balance(update: Update, context):
    keyboard = [
        ['üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text('–í–∞—à –±–∞–ª–∞–Ω—Å: 0', reply_markup=reply_markup)


async def mykey(update: Update, context):

    base_url = 'https://domkrat.linkpc.net:11445'
    yours_username = 'admin1'
    yours_password = 'df61f27e889e5b8307c3d7affd63b7cf'
    ssl = True

    client = marzban_all_acyncio.Marzipan(
        url=base_url,
        username=yours_username,
        password=yours_password,
        ssl=ssl
    )
    await client.async_init()

    user_id = update.effective_user.id
    keyinfo = await marzban_all_acyncio.get_link(telegram_id=str(user_id))

    if keyinfo is not None:
        keyboard = [
            [InlineKeyboardButton(f"Test ND", callback_data='key1')],
            [InlineKeyboardButton(f"ND", callback_data='key2')],
            [InlineKeyboardButton(f"üá´üá∑ –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á üá´üá∑", callback_data='key3')],
            [InlineKeyboardButton(f"üá´üá∑", callback_data='key4')],
            [InlineKeyboardButton(f"üá©üá™ –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á üá©üá™", callback_data='key5')],
            [InlineKeyboardButton(f"üá©üá™", callback_data='key6')],
        ]
        Akeyboard = [
        ]
        Bkeyboard = [[InlineKeyboardButton("üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]]

        for i in range(len(keyinfo)):

            if keyinfo[i] is not None:
                Akeyboard.append(keyboard[i])
        Akeyboard = Akeyboard + Bkeyboard
        reply_markup = InlineKeyboardMarkup(Akeyboard)
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á:', reply_markup=reply_markup)
    else:
        Bkeyboard = [[InlineKeyboardButton("üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]]
        reply_markup = InlineKeyboardMarkup(Bkeyboard)
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π:', reply_markup=reply_markup)


# –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
async def pay(update: Update, context):
    keyboard = [
        ['–°–ë–ü'],
        ['–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –ö–∞—Ä—Ç–∞'],
        ['Bitcoin', 'üîô–ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', reply_markup=reply_markup)


# –ù–∞–∑–∞–¥
async def back(update: Update, context):
    keyboard = [

        ['üè¨–ú–∞–≥–∞–∑–∏–Ω'],
        ['üîë–ö–ª—é—á–∏'],
        ['ü™ô–ö–æ—à–µ–ª–µ–∫']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.callback_query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=reply_markup)
    await update.callback_query.answer()


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = Application.builder().token("APIBOT").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", hello))
    application.add_handler(MessageHandler(filters.Regex('^üè¨–ú–∞–≥–∞–∑–∏–Ω$'), shop))
    application.add_handler(MessageHandler(filters.Regex('^ü™ô–ö–æ—à–µ–ª–µ–∫$'), wallet))
    application.add_handler(MessageHandler(filters.Regex('^üîë–ö–ª—é—á–∏$'), mykey))
    application.add_handler(MessageHandler(filters.Regex('^üíµ–ë–∞–ª–∞–Ω—Å$'), balance))
    application.add_handler(MessageHandler(filters.Regex('^‚ûï–ü–æ–ø–æ–ª–Ω–∏—Ç—å$'), pay))
    application.add_handler(MessageHandler(filters.Regex('^üõí–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), start))
    application.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
